local Players = game:GetService("Players")
local GC = getconnections or get_signal_cons

if GC then
	for _, v in pairs(GC(Players.LocalPlayer.Idled)) do
		if v.Disable then
			v.Disable(v)
		elseif v.Disconnect then
			v.Disconnect(v)
		end
	end
else
	local VirtualUser = cloneref(game:GetService("VirtualUser"))
	Players.LocalPlayer.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)
end

local Starlight = loadstring(game:HttpGet("https://raw.nebulasoftworks.xyz/starlight"))()
local NebulaIcons = loadstring(game:HttpGet("https://raw.nebulasoftworks.xyz/nebula-icon-library-loader"))()

local Window = Starlight:CreateWindow({
	Name = "Auto Buy Brainrot by LKQ",
	Subtitle = "by LKQ",
	LoadingSettings = {
		Title = "by LKQ",
		Subtitle = "by LKQ",
	},
	FileSettings = {
		ConfigFolder = "NyansakenHubScript"
	},
})

local TabSection = Window:CreateTabSection("Steal A Brainrot")
local Tab = TabSection:CreateTab({
	Name = "Steal A Brainrot",
	Columns = 2,
}, "INDEX1")

local Groupbox = Tab:CreateGroupbox({
	Name = "Buy Brainrot",
	Column = 1,
}, "INDEX2")

local checkBrainrot = false
local selectedBrainrots, selectedRarities, selectedMutations = {}, {}, {}
local blacklistedBrainrots, blacklistedRarities, blacklistedMutations = {}, {}, {}

local toggle = Groupbox:CreateToggle({
	Name = "Auto Buy Brainrot",
	CurrentValue = false,
	Callback = function(Value)
		checkBrainrot = Value
	end
}, "TuDongMuaBrainrot")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local animalsFolder = ReplicatedStorage:WaitForChild("Models"):WaitForChild("Animals")
local brainrotNames = {}
for _, child in ipairs(animalsFolder:GetChildren()) do
	if child:IsA("Model") then
		table.insert(brainrotNames, child.Name)
	end
end

local Dropdown1 = toggle:AddDropdown({
	Name = "Brainrot Whitelist",
	Options = brainrotNames,
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		selectedBrainrots = Options
	end
}, "ChonBrainrot")

local Dropdown2 = toggle:AddDropdown({
	Name = "Rarity Whitelist",
	Options = {"Common","Rare","Epic","Legendary","Mythic","Brainrot God","Secret","OG"},
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		selectedRarities = Options
	end
}, "ChonDoHiem")

local Dropdown3 = toggle:AddDropdown({
	Name = "Mutation Whitelist",
	Options = {"Gold","Diamond","Bloodrot","Rainbow","Candy","Lava","Galaxy","YinYang"},
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		selectedMutations = Options
	end
}, "ChonDong")

local BlacklistGroup = Tab:CreateGroupbox({
	Name = "Blacklist Filters",
	Column = 2,
}, "BLACKLIST_GROUP")

local Dropdown1_Blacklist = BlacklistGroup:AddDropdown({
	Name = "Brainrot Blacklist",
	Options = brainrotNames,
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		blacklistedBrainrots = Options
	end
}, "BlacklistBrainrot")

local Dropdown2_Blacklist = BlacklistGroup:AddDropdown({
	Name = "Rarity Blacklist",
	Options = {"Common","Rare","Epic","Legendary","Mythic","Brainrot God","Secret","OG"},
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		blacklistedRarities = Options
	end
}, "BlacklistRarity")

local Dropdown3_Blacklist = BlacklistGroup:AddDropdown({
	Name = "Mutation Blacklist",
	Options = {"Gold","Diamond","Bloodrot","Rainbow","Candy","Lava","Galaxy","YinYang"},
	CurrentOption = {},
	MultipleOptions = true,
	Callback = function(Options)
		blacklistedMutations = Options
	end
}, "BlacklistMutation")

local LocalPlayer = Players.LocalPlayer
local runFreezeEnabled = false
local targetPos = Vector3.new(-410, -7, 235)
local reachThreshold = 2

local function goAndFreeze(character)
	local humanoid = character:WaitForChild("Humanoid")
	local hrp = character:WaitForChild("HumanoidRootPart")
	repeat
		humanoid:MoveTo(targetPos)
		task.wait()
	until not runFreezeEnabled or (hrp.Position - targetPos).Magnitude <= reachThreshold
	if runFreezeEnabled then
		for _, part in ipairs(character:GetDescendants()) do
			if part:IsA("BasePart") and not part.Anchored then
				part.Anchored = true
			end
		end
	end
end

local function unfreeze(character)
	for _, part in ipairs(character:GetDescendants()) do
		if part:IsA("BasePart") and part.Anchored then
			part.Anchored = false
		end
	end
end

local freezeToggle = Groupbox:CreateToggle({
	Name = "Automatically Come Into The Brainrot Track",
	CurrentValue = false,
	Callback = function(Value)
		runFreezeEnabled = Value
		if Value and LocalPlayer.Character then
			task.spawn(function()
				goAndFreeze(LocalPlayer.Character)
			end)
		else
			if LocalPlayer.Character then
				unfreeze(LocalPlayer.Character)
			end
		end
	end,
}, "AutoChayFreeze")

LocalPlayer.CharacterAdded:Connect(function(char)
	if runFreezeEnabled then
		task.spawn(function()
			goAndFreeze(char)
		end)
	else
		task.spawn(function()
			unfreeze(char)
		end)
	end
end)

local function getNearestModelInfo(origin)
	local nearestModel, nearestIndex, nearestRarity, nearestMutation
	local nearestDistance = math.huge
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("Model") then
			local index = obj:GetAttribute("Index")
			if index then
				local pos
				if obj.PrimaryPart then
					pos = obj.PrimaryPart.Position
				else
					local part = obj:FindFirstChildWhichIsA("BasePart")
					if part then
						pos = part.Position
					end
				end
				if pos then
					local dist = (pos - origin.Position).Magnitude
					if dist < nearestDistance then
						nearestDistance = dist
						nearestModel = obj
						nearestIndex = index
						local rarityLabel = obj:FindFirstChild("Part")
							and obj.Part:FindFirstChild("Info")
							and obj.Part.Info:FindFirstChild("AnimalOverhead")
							and obj.Part.Info.AnimalOverhead:FindFirstChild("Rarity")
						if rarityLabel and rarityLabel:IsA("TextLabel") then
							nearestRarity = rarityLabel.Text
						end
						local mutationLabel = obj:FindFirstChild("Part")
							and obj.Part:FindFirstChild("Info")
							and obj.Part.Info:FindFirstChild("AnimalOverhead")
							and obj.Part.Info.AnimalOverhead:FindFirstChild("Mutation")
						if mutationLabel and mutationLabel:IsA("TextLabel") then
							local text = mutationLabel.Text:gsub("<.->", ""):gsub("^%s*(.-)%s*$", "%1")
							nearestMutation = text
						end
					end
				end
			end
		end
	end
	return nearestModel, nearestIndex, nearestRarity, nearestMutation, nearestDistance
end

local VirtualInputManager = game:GetService("VirtualInputManager")
local function interactBrainrot()
	VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
	task.wait(1)
	VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

task.spawn(function()
	local player = Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")

	while true do
		if checkBrainrot then
			local model, index, rarity, mutation, distance = getNearestModelInfo(hrp)
			if model then
				local target = true
				if #selectedBrainrots > 0 and not table.find(selectedBrainrots, index) then
					target = false
				end
				if #selectedRarities > 0 and not table.find(selectedRarities, rarity) then
					target = false
				end
				if #selectedMutations > 0 and not table.find(selectedMutations, mutation) then
					target = false
				end
				if table.find(blacklistedBrainrots, index) then
					target = false
				end
				if table.find(blacklistedRarities, rarity) then
					target = false
				end
				if table.find(blacklistedMutations, mutation) then
					target = false
				end
				if target then
					interactBrainrot()
				end
			end
		end
		task.wait()
	end
end)

Starlight:LoadAutoloadConfig()
Tab:BuildConfigGroupbox(2)
